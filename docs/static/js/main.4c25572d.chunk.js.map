{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prevState","type","placeholder","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifsData","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","gifs","useFetchGifs","gif","GifExpertApp","categories","console","log","ReactDOM","render","document","getElementById"],"mappings":"mMAuCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GACX,MAAM,CAAEP,GAAR,mBAAuBO,OAE3BN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,YAAY,0BACZC,MAAQV,EACRW,SAtBS,SAACR,GAClBF,EAAeE,EAAES,OAAOF,a,QCQjBG,EAbK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC1B,OACI,sBAAKC,UAAU,6CAAf,UACI,8BACI,qBAAKC,IAAKF,EAAKG,IAAKJ,MAExB,8BACI,+BAAOA,U,uBCTVK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbN,EAFa,iDAEmCO,UAAUF,GAF7C,+DAGDG,MAAMR,GAHL,cAGbS,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KAEFC,EAAWD,EAAKE,KAAI,SAAAC,GACtB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAVtB,kBAcZY,GAdY,4CAAH,sDCwBLM,EAtBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAEf,ECFwB,SAAEA,GAE1B,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAACC,GACHH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAACd,IAEGe,EDfwBK,CAAcpB,GAAhCmB,EAAb,EAAQb,KAAWQ,EAAnB,EAAmBA,QAGnB,OACI,qCACI,oBAAIlB,UAAU,wCAAd,SAAuDI,IAEnDc,GAAW,mBAAGlB,UAAU,mCAAb,wBAEf,qBAAKA,UAAU,YAAf,SAEQuB,EAAKX,KAAI,SAAAa,GAAG,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIX,aEU/BY,EAvBM,WAEjB,MAAoC3C,mBAAS,CAAC,KAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAGA,OADA8C,QAAQC,IAAIF,GAER,qCACI,8CACA,cAAC,EAAD,CAAa7C,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWf,KAAK,SAAAR,GAAQ,OACrB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCbrC0B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4c25572d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleChange = (e) => {\n        setInputValue( e.target.value )\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( prevState => {\n                return [inputValue, ...prevState]\n            })\n            setInputValue('')\n        }\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                placeholder=\"Introduce una categoria\"\n                value={ inputValue }\n                onChange={ handleChange }\n                />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","import React from 'react';\n\n\nconst GifGridItem = ({ title, url }) => {\n    return (\n        <div className='card animate__animated animate__fadeInDown'>\n            <div>\n                <img src={url} alt={title} />\n            </div>\n            <div>\n                <span>{title}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default GifGridItem;","\nexport const getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=pCJoVCalWZSXhpiLdTgKOEBDqCCzvOKN&limit=10`\n    const res = await fetch(url)\n    const { data } = await res.json()\n\n    const gifsData = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifsData\n}","import GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n\n    const { data:gifs, loading } = useFetchGifs( category )\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>\n            {\n                loading && <p className=\"animate__animated animate__flash\">Loading...</p>\n            }\n            <div className=\"card-grid\">\n                {\n                    gifs.map(gif => (\n                        <GifGridItem key={gif.id} {...gif} />\n                    ))\n                }\n            </div>\n        </>\n    );\n};\n\nexport default GifGrid;","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then((gifs) => {\n                setState({\n                    data: gifs,\n                    loading: false\n                })\n            })\n    }, [category])\n\n    return state;\n};\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([''])\n\n    console.log(categories)\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n    \n            <ol>\n                {\n                    categories.map( category => (\n                       <GifGrid key={category} category={category}/>\n                    ))\n                }\n            </ol>\n\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}